// INPUTS:
// UV: Texture coordinate of the rendered scene image
// ViewSize: Float2 resolution of game in pixels
// PixelPosition: Current Pixel Position
// SceneTexture: Not explicity used in code, but necessary for the SceneTextureLookup function from Unreal's Material Compiler (check MaterialCompiler.h in Runtime Module)

float colorDistance(float3 color1, float3 color2) {
    float3 lumaMap = float3(0.299f, 0.587f, 0.114f);
    float luma1 = dot(color1, lumaMap);
    float luma2= dot(color2, lumaMap);
    float lumadiff = luma1-luma2;
    float3 diff = color1 - color2;
    float diff2 = dot(diff*diff, lumaMap);
    return diff2*0.75 + lumadiff*lumadiff;
}

float3 get_closest_color(float3 color, Texture2D DitherPalette, sampler DitherPaletteSampler, float ditherValue, int paletteSize) {
    float3 col;
    float x = 4;
    float3 threshold = float3(1/x, 1/x, 1/x);
    float3 colorThreshold = color + (ditherValue -0.5) * threshold;

    float least_penalty = 1e99;
    for(int index1 = 0; index1 < paletteSize; index1++) {
      float2 colorUV = float2(float(index1) /paletteSize, 0.5);
      float3 c = Texture2DSample(DitherPalette, DitherPaletteSampler, colorUV).rgb;

	  float d = colorDistance(colorThreshold, c);

      if(d < least_penalty)
        {
            least_penalty = d;
            col = c;
        }
	}

    return col;
}

float3 DitherPaletteFunc(float2 UV, float2 ViewSize, float2 PixelPosition, Texture2D Tex, SamplerState TexSampler, 
                         float DitherSize, Texture2D DitherPalette, SamplerState DitherPaletteSampler, int PaletteSize)
{
    static const int SceneTextureId = 14;

    float2 Resolution = ViewSize / DitherSize;
    float2 PixelPositionDither = PixelPosition / DitherSize;
    float2 PixelPositionDitherFloor = floor(PixelPositionDither);
    float2 SceneUVFloor = UV * PixelPositionDitherFloor / PixelPositionDither;
    UV = floor(UV * Resolution) / Resolution;

    // Luminosity of Scene Pixel
    float3 PixelColor = SceneTextureLookup(SceneUVFloor, SceneTextureId, 0).rgb;

    // Bayer pattern
    float2 TextureDim;
    Tex.GetDimensions(TextureDim.x, TextureDim.y);
    float2 PatternUV = int2(UV * Resolution) / TextureDim;
    float2 PixelUV = PixelPositionDitherFloor / TextureDim;
    float ditherValue = Texture2DSample(Tex, TexSampler, PixelUV).r;

    float3 rgb = get_closest_color(PixelColor, DitherPalette, DitherPaletteSampler, ditherValue, PaletteSize);

    return rgb;
}